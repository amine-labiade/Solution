// <auto-generated />
using System;
using InventoryManagementApi.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace InventoryManagementApi.Migrations
{
    [DbContext(typeof(InventoryDbContext))]
    partial class InventoryDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.15")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("InventoryManagementApi.Models.DataSourceDataModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AcessToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConnectionLink")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<string>("UserAccesId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("inv_data_source");
                });

            modelBuilder.Entity("InventoryManagementApi.Models.FieldDataDataModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DataReference")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DataType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("inv_field_data");
                });

            modelBuilder.Entity("InventoryManagementApi.Models.FieldDataModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Category")
                        .HasColumnType("int");

                    b.Property<Guid?>("Data_Source_Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("Field_Data_Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Label")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Position")
                        .HasColumnType("int");

                    b.Property<Guid>("Step_Id")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("Data_Source_Id");

                    b.HasIndex("Field_Data_Id")
                        .IsUnique()
                        .HasFilter("[Field_Data_Id] IS NOT NULL");

                    b.HasIndex("Step_Id");

                    b.ToTable("inv_field");
                });

            modelBuilder.Entity("InventoryManagementApi.Models.InventoryTypeDataModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("inv_inventory_type");
                });

            modelBuilder.Entity("InventoryManagementApi.Models.OptionDataModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<Guid?>("ChoiceButton_Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("Dropdown_Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("IsDefault")
                        .HasColumnType("bit");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("referenceId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ChoiceButton_Id");

                    b.HasIndex("Dropdown_Id");

                    b.ToTable("inv_option");
                });

            modelBuilder.Entity("InventoryManagementApi.Models.ProcessDataModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("Data_Source_Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("InventoryType_Id")
                        .HasColumnType("int");

                    b.Property<bool>("IsArchived")
                        .HasColumnType("bit");

                    b.Property<bool>("IsFavorite")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("Schedule_Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("State")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Data_Source_Id");

                    b.HasIndex("InventoryType_Id");

                    b.HasIndex("Schedule_Id");

                    b.ToTable("inv_process");
                });

            modelBuilder.Entity("InventoryManagementApi.Models.RoleDataModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("RoleName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("inv_role");
                });

            modelBuilder.Entity("InventoryManagementApi.Models.ScheduleDataModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("inv_schedule");
                });

            modelBuilder.Entity("InventoryManagementApi.Models.StepDataModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("Next_Step_Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("Previous_Step_Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("Process_Id")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("Next_Step_Id");

                    b.HasIndex("Previous_Step_Id");

                    b.HasIndex("Process_Id");

                    b.ToTable("inv_step");
                });

            modelBuilder.Entity("InventoryManagementApi.Models.UserDataModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("EncryptedPassword")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Role_Id")
                        .HasColumnType("int");

                    b.Property<string>("Username")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Role_Id");

                    b.ToTable("inv_user");
                });

            modelBuilder.Entity("ProcessDataModelUserDataModel", b =>
                {
                    b.Property<Guid>("InventoryProcessesId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UsersId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("InventoryProcessesId", "UsersId");

                    b.HasIndex("UsersId");

                    b.ToTable("ProcessDataModelUserDataModel");
                });

            modelBuilder.Entity("InventoryManagementApi.Models.InputFieldDataModel", b =>
                {
                    b.HasBaseType("InventoryManagementApi.Models.FieldDataModel");

                    b.Property<bool?>("IsRequired")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("inv_input_field");
                });

            modelBuilder.Entity("InventoryManagementApi.Models.OutputFieldDataModel", b =>
                {
                    b.HasBaseType("InventoryManagementApi.Models.FieldDataModel");

                    b.ToTable("inv_output_field");
                });

            modelBuilder.Entity("InventoryManagementApi.Models.ChoiceButtonsDataModel", b =>
                {
                    b.HasBaseType("InventoryManagementApi.Models.InputFieldDataModel");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.ToTable("inv_choice_button");
                });

            modelBuilder.Entity("InventoryManagementApi.Models.DateInputDataModel", b =>
                {
                    b.HasBaseType("InventoryManagementApi.Models.InputFieldDataModel");

                    b.Property<DateTime>("MaxDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("MinDate")
                        .HasColumnType("datetime2");

                    b.ToTable("inv_date_input");
                });

            modelBuilder.Entity("InventoryManagementApi.Models.DropDownDataModel", b =>
                {
                    b.HasBaseType("InventoryManagementApi.Models.InputFieldDataModel");

                    b.Property<bool>("IsMultiselect")
                        .HasColumnType("bit");

                    b.ToTable("inv_dropdown");
                });

            modelBuilder.Entity("InventoryManagementApi.Models.FileInputDataModel", b =>
                {
                    b.HasBaseType("InventoryManagementApi.Models.InputFieldDataModel");

                    b.Property<string>("Extension")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MaxSize")
                        .HasColumnType("int");

                    b.Property<int>("MinSize")
                        .HasColumnType("int");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("inv_file_input");
                });

            modelBuilder.Entity("InventoryManagementApi.Models.SliderDataModel", b =>
                {
                    b.HasBaseType("InventoryManagementApi.Models.InputFieldDataModel");

                    b.Property<int>("Max")
                        .HasColumnType("int");

                    b.Property<int>("Min")
                        .HasColumnType("int");

                    b.ToTable("inv_slider");
                });

            modelBuilder.Entity("InventoryManagementApi.Models.TextInputDataModel", b =>
                {
                    b.HasBaseType("InventoryManagementApi.Models.InputFieldDataModel");

                    b.Property<string>("Max")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Min")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Placeholder")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ValidationRegex")
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("inv_text_input");
                });

            modelBuilder.Entity("InventoryManagementApi.Models.FileOutputDataModel", b =>
                {
                    b.HasBaseType("InventoryManagementApi.Models.OutputFieldDataModel");

                    b.Property<string>("Extension")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FilePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("inv_file_output");
                });

            modelBuilder.Entity("InventoryManagementApi.Models.LinkOutputDataModel", b =>
                {
                    b.HasBaseType("InventoryManagementApi.Models.OutputFieldDataModel");

                    b.Property<string>("DisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Url")
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("inv_link");
                });

            modelBuilder.Entity("InventoryManagementApi.Models.TextOutputDataModel", b =>
                {
                    b.HasBaseType("InventoryManagementApi.Models.OutputFieldDataModel");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("inv_text_output");
                });

            modelBuilder.Entity("InventoryManagementApi.Models.FieldDataModel", b =>
                {
                    b.HasOne("InventoryManagementApi.Models.DataSourceDataModel", "DataSource")
                        .WithMany()
                        .HasForeignKey("Data_Source_Id");

                    b.HasOne("InventoryManagementApi.Models.FieldDataDataModel", "FieldData")
                        .WithOne()
                        .HasForeignKey("InventoryManagementApi.Models.FieldDataModel", "Field_Data_Id")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("InventoryManagementApi.Models.StepDataModel", null)
                        .WithMany("StepInventoryFields")
                        .HasForeignKey("Step_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DataSource");

                    b.Navigation("FieldData");
                });

            modelBuilder.Entity("InventoryManagementApi.Models.OptionDataModel", b =>
                {
                    b.HasOne("InventoryManagementApi.Models.ChoiceButtonsDataModel", null)
                        .WithMany("Options")
                        .HasForeignKey("ChoiceButton_Id");

                    b.HasOne("InventoryManagementApi.Models.DropDownDataModel", null)
                        .WithMany("Options")
                        .HasForeignKey("Dropdown_Id");
                });

            modelBuilder.Entity("InventoryManagementApi.Models.ProcessDataModel", b =>
                {
                    b.HasOne("InventoryManagementApi.Models.DataSourceDataModel", "ProcessUsersDataSource")
                        .WithMany()
                        .HasForeignKey("Data_Source_Id");

                    b.HasOne("InventoryManagementApi.Models.InventoryTypeDataModel", "InventoryType")
                        .WithMany()
                        .HasForeignKey("InventoryType_Id");

                    b.HasOne("InventoryManagementApi.Models.ScheduleDataModel", "Schedule")
                        .WithMany()
                        .HasForeignKey("Schedule_Id");

                    b.Navigation("InventoryType");

                    b.Navigation("ProcessUsersDataSource");

                    b.Navigation("Schedule");
                });

            modelBuilder.Entity("InventoryManagementApi.Models.StepDataModel", b =>
                {
                    b.HasOne("InventoryManagementApi.Models.StepDataModel", "NextInventoryStep")
                        .WithMany()
                        .HasForeignKey("Next_Step_Id");

                    b.HasOne("InventoryManagementApi.Models.StepDataModel", "PreviousInventoryStep")
                        .WithMany()
                        .HasForeignKey("Previous_Step_Id");

                    b.HasOne("InventoryManagementApi.Models.ProcessDataModel", null)
                        .WithMany("InventorySteps")
                        .HasForeignKey("Process_Id")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("NextInventoryStep");

                    b.Navigation("PreviousInventoryStep");
                });

            modelBuilder.Entity("InventoryManagementApi.Models.UserDataModel", b =>
                {
                    b.HasOne("InventoryManagementApi.Models.RoleDataModel", "Role")
                        .WithMany("Users")
                        .HasForeignKey("Role_Id");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("ProcessDataModelUserDataModel", b =>
                {
                    b.HasOne("InventoryManagementApi.Models.ProcessDataModel", null)
                        .WithMany()
                        .HasForeignKey("InventoryProcessesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("InventoryManagementApi.Models.UserDataModel", null)
                        .WithMany()
                        .HasForeignKey("UsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("InventoryManagementApi.Models.InputFieldDataModel", b =>
                {
                    b.HasOne("InventoryManagementApi.Models.FieldDataModel", null)
                        .WithOne()
                        .HasForeignKey("InventoryManagementApi.Models.InputFieldDataModel", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("InventoryManagementApi.Models.OutputFieldDataModel", b =>
                {
                    b.HasOne("InventoryManagementApi.Models.FieldDataModel", null)
                        .WithOne()
                        .HasForeignKey("InventoryManagementApi.Models.OutputFieldDataModel", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("InventoryManagementApi.Models.ChoiceButtonsDataModel", b =>
                {
                    b.HasOne("InventoryManagementApi.Models.InputFieldDataModel", null)
                        .WithOne()
                        .HasForeignKey("InventoryManagementApi.Models.ChoiceButtonsDataModel", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("InventoryManagementApi.Models.DateInputDataModel", b =>
                {
                    b.HasOne("InventoryManagementApi.Models.InputFieldDataModel", null)
                        .WithOne()
                        .HasForeignKey("InventoryManagementApi.Models.DateInputDataModel", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("InventoryManagementApi.Models.DropDownDataModel", b =>
                {
                    b.HasOne("InventoryManagementApi.Models.InputFieldDataModel", null)
                        .WithOne()
                        .HasForeignKey("InventoryManagementApi.Models.DropDownDataModel", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("InventoryManagementApi.Models.FileInputDataModel", b =>
                {
                    b.HasOne("InventoryManagementApi.Models.InputFieldDataModel", null)
                        .WithOne()
                        .HasForeignKey("InventoryManagementApi.Models.FileInputDataModel", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("InventoryManagementApi.Models.SliderDataModel", b =>
                {
                    b.HasOne("InventoryManagementApi.Models.InputFieldDataModel", null)
                        .WithOne()
                        .HasForeignKey("InventoryManagementApi.Models.SliderDataModel", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("InventoryManagementApi.Models.TextInputDataModel", b =>
                {
                    b.HasOne("InventoryManagementApi.Models.InputFieldDataModel", null)
                        .WithOne()
                        .HasForeignKey("InventoryManagementApi.Models.TextInputDataModel", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("InventoryManagementApi.Models.FileOutputDataModel", b =>
                {
                    b.HasOne("InventoryManagementApi.Models.OutputFieldDataModel", null)
                        .WithOne()
                        .HasForeignKey("InventoryManagementApi.Models.FileOutputDataModel", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("InventoryManagementApi.Models.LinkOutputDataModel", b =>
                {
                    b.HasOne("InventoryManagementApi.Models.OutputFieldDataModel", null)
                        .WithOne()
                        .HasForeignKey("InventoryManagementApi.Models.LinkOutputDataModel", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("InventoryManagementApi.Models.TextOutputDataModel", b =>
                {
                    b.HasOne("InventoryManagementApi.Models.OutputFieldDataModel", null)
                        .WithOne()
                        .HasForeignKey("InventoryManagementApi.Models.TextOutputDataModel", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("InventoryManagementApi.Models.ProcessDataModel", b =>
                {
                    b.Navigation("InventorySteps");
                });

            modelBuilder.Entity("InventoryManagementApi.Models.RoleDataModel", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("InventoryManagementApi.Models.StepDataModel", b =>
                {
                    b.Navigation("StepInventoryFields");
                });

            modelBuilder.Entity("InventoryManagementApi.Models.ChoiceButtonsDataModel", b =>
                {
                    b.Navigation("Options");
                });

            modelBuilder.Entity("InventoryManagementApi.Models.DropDownDataModel", b =>
                {
                    b.Navigation("Options");
                });
#pragma warning restore 612, 618
        }
    }
}
